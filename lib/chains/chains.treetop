grammar Chains
	
	rule document
		# An entire Chains document.
		(space? document_element (space? comment)? space?)* <Document>
	end

	rule document_element
		(
			block_comment / comment /
			program_name /
			include_directive /
			event_definition / function_definition / 
			device_combine /
			device_definition / constant_definition /
			structure_definition / variable_definition 
		)
	end

	rule block_comment
		(c_comment / header_comment / hidden_block_comment) <BlockComment>
	end

	rule comment
		'//' (!"\n" .)* "\n"* <Comment>
	end

	rule header_comment
		# A type of block comment.
		'(!'
		(
			!'!)'
			(. / "\n")
		)*
		'!)'
	end
	
	rule c_comment
		# A type of block comment.
		'/*'
		(
			!'*/'
			(. / "\n")
		)*
		'*/'
	end
	
	rule hidden_block_comment
		# A block comment that doesn't show up in the
		# post-processed NetLinx document.
		'(^'
		(
			!'^)'
			(. / "\n")
		)*
		'^)'
	end
	
	rule event_definition
		# TODO
		user_symbol space? '=>' space?
		(
			indent
			(user_symbol space? ',' space? user_symbol space?)+
			event_handler+
			outdent
		)
		<EventDefinition>
	end
	
	rule event_handler
		user_symbol space? '->' space?
		(
			indent
			(
				space?
				valid_in_function
				space?
			)*
			outdent
		)?
		<EventHandler>
	end

	rule function_definition
		# TODO
		(variable_keyword space)?
		user_symbol space?
		(
			'(' space? (variable_keyword space user_symbol ','? space?)* ')' space?
		)?
		'->' space?
		(
			# Statement is directly after the function symbol.
			# One line definition.
			(
				# TODO: replace
				user_symbol
			)
			/
			# Code indents to a nested set.
			(
				indent
				( space?
					(
						# Things that can be done inside a function.
						valid_in_function
					)
				space? )*
				outdent
			)
		)?
		<FunctionDefinition>
	end
	
	rule valid_in_function
		(conditional / variable_definition / assignment)
	end
	
	rule conditional
		if_statement <Conditional>
	end
	
	rule if_statement
		'if' space expression
		(
			indent
			( space?
				(
					valid_in_function
				)
			space? )*
			outdent
		)
		<IfStatement>
	end
	
	rule expression
		comparison
		<Expression>
	end
	
	rule comparison
		(user_symbol / dps / float / string)
		space? ('=' / '!') '=' space?
		(user_symbol / dps / float / string)
		<Comparison>
	end

	rule program_name
		# Definition of the NetLinx program name.
		# TODO
		('PROGRAM_NAME' / 'program_name') space? '=' space? string <ProgramName>
	end

	rule include_directive
		'#include' space string <IncludeDirective>
	end

	rule device_definition
		user_symbol space? '=' space? dps (space string)? <DeviceDefinition>
	end
	
	rule device_combine
		device_definition
		indent
			(space? device_definition space?)+
		outdent
		<DeviceCombine>
	end

	rule dps
		# A NetLinx device, port, system address: 10001:1:0
		dps_segment ':' dps_segment ':' dps_segment <DPS>
	end

	rule dps_segment
		# The numeric part of a NetLinx DPS.
		[0-9] 1..5 <DPSSegment>
	end

	rule constant_definition
		constant space? '=' space? (float / integer / string)
		<ConstantDefinition>
	end

	rule constant
		[A-Z_] [A-Z0-9_]+ <Constant>
	end

	rule structure_definition
		user_symbol ':'
		indent
		(space? variable_keyword space user_symbol space?)*
		outdent
		<StructureDefinition>
	end

	rule variable_definition
		variable_keyword space user_symbol
		(space? '=' space? (dps / float / integer / string))?
		<VariableDefinition>
	end
	
	rule assignment
		user_symbol space? '=' space? (dps / float / integer / string) <Assignment>
	end

	rule user_symbol
		# Named symbols the user can create,
		# like varialbe and function names.
		[a-zA-Z_] [a-zA-Z0-9_]* <UserSymbol>
	end

	rule string
		'"' ([^"\\] / "\\" . )* '"'
		/
		"'" ([^'\\] / "\\" . )* "'"
		<StringLiteral>
	end

	rule integer
		('+' / '-')? [0-9]+ <IntegerLiteral>
	end

	rule float
		('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+)) <FloatLiteral>
	end

	rule indent
		# Indent symbol defined by the preformatter.
		space? '~@(INDENT)@~' space? <Indent>
	end

	rule outdent
		# Outdent symbol defined by the preformatter.
		space? '~@(OUTDENT)@~' space? <Outdent>
	end

	rule variable_keyword
		('ui' / 'si' / 'ul' / 'sl' / 'fl' / 'db' / 'ch' / 'wc' / 'st' /
		'st[' [0-9]+ ']' / 'dv' / 'dc' /
		'integer' / 'sinteger' / 'long' / 'slong' / 'float' / 'double' /
		'char' / 'char[' [0-9]+ ']' / 'widechar' / 'widechar[' [0-9+] ']' /
		'dev' / 'devchan')
		<VariableKeyword>
		# TODO: User-defined types.
	end

	rule space
		[\s]+
	end

end

